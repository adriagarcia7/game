#include "Player.hh"


/**
 * Write the name of your player and save this file
 * with the same name and .cc extension.
 */
#define PLAYER_NAME Gloin


struct PLAYER_NAME : public Player {

  /**
   * Factory: returns a new instance of this class.
   * Do not modify this function.
   */
  static Player* factory () {
    return new PLAYER_NAME;
  }

  /**
   * Types and attributes for your player can be defined here.
   */
  typedef vector<int> VI;
  typedef vector<VI> MI;

  typedef vector<bool> VB;
  typedef vector<VB> MB;
        
  typedef vector<Pos> VP;
  typedef vector<VP> MP;

	typedef pair<int, Pos> pes_pos;
	typedef vector< vector<pes_pos> > Graf;
  
  const int N = 60;
  MB crash = MB(N,VB(N,false));
  
  bool find_enemy(Pos p) {
    if (cell(p).id != -1 and unit(cell(p).id).player != me()) return true;
    for (int i=0; i<8; ++i) {
      if (pos_ok(p+Dir(i))) {
        Cell k = cell(p+Dir(i));
        if (k.id != -1 and unit(k.id).player != me()) return true;
      }
    }
    return false;
  }
  
  bool ciclable(Pos p) {
    if (cell(p).type == Granite or cell(p).type == Abyss or cell(p).type == Rock) return false;
    return true;
  }

  bool minable(Pos p) {
    if (cell(p).type == Granite or cell(p).type == Abyss) return false;
    return true;
  }
  
  bool adyacente_gringo(Pos p1, Pos p2) { 
    for (int k=0; k<8; ++k) {
      if (p1+Dir(k) == p2) return true;
    }
    return false;
  }
  
  bool adyacente_wizard(Pos p1, Pos p2) { 
    for (int k=0; k<4; ++k) {
      if (p1+Dir(2*k) == p2) return true;
    }
    return false;
  }
  
  void reset_mapa() {
    crash = MB(N,VB(N,false));
  }
  
  void move_dwarves() {
    vector<int> D = dwarves(me());
    for (unsigned int i=0; i<D.size(); ++i) {
      MI dist = MI(N,VI(N,0));  
      MB visit = MB(N,VB(N,false));
      MP path = MP(N,VP(N));
      int dni = D[i];
      Unit enano = unit(dni);
      Pos p = enano.pos;
      Pos obj;
      bool redi = false;

      for (int k=0; k<8; ++k) {
        if (pos_ok(p+Dir(k)) and cell(p+Dir(k)).id != -1 and unit(cell(p+Dir(k)).id).type == Wizard and unit(cell(p+Dir(k)).id).player != me()) {
          command(dni,Dir(k)); // envio al enano hacia el mago enemigo
          redi = true;
        }
      }
			if (not redi) {
				for (int k=0; k<8; ++k) {
					if (pos_ok(p+Dir(k)) and cell(p+Dir(k)).id != -1 and unit(cell(p+Dir(k)).id).type == Dwarf and unit(cell(p+Dir(k)).id).player != me()) {
						command(dni,Dir(k)); // envio al enano hacia el enano enemigo
						redi = true;
					}
				}
			}
			if (not redi) {
				for (int k=0; k<8; ++k) {
					if (pos_ok(p+Dir(k)) and cell(p+Dir(k)).id != -1 and unit(cell(p+Dir(k)).id).type == Orc and unit(cell(p+Dir(k)).id).player != me()) {
						command(dni,Dir(k)); // envio al enano hacia el orco
						redi = true;
					}
				}
			}
			if (not redi and round() < 120) {
				int distancia;
				distancia = bufar(p, obj, visit, path, dist, crash); // busco tesoros
				if (distancia != -1) {
				  while (not adyacente_gringo(obj,p)) obj = path[obj.i][obj.j];
					for (int k=0; k<8; ++k) {
						if (p+Dir(k) == obj and not find_enemy(obj)) {
              command(dni,Dir(k)); // envio al enano hacia el tesoro
              redi = true;
            }
					}
				}
			}
      if (not redi and round() >= 120) {
        somos_de_oro(p, obj, visit, path, dist, crash);
        while (not adyacente_gringo(obj,p)) obj = path[obj.i][obj.j];
        for (int k=0; k<8; ++k) {
          if (p+Dir(k) == obj and not find_enemy(obj)) command(dni,Dir(k)); // envio al enano hacia el tesoro
        }	
      }
    }
  }
  
  void move_wizards() {
    vector<int> W = wizards(me());
    for (unsigned int i=0; i<W.size(); ++i) {
      MI dist = MI(N,VI(N,0));  
      MB visit = MB(N,VB(N,false));
      MP path = MP(N,VP(N));
      int dni = W[i];
      Unit magisu = unit(dni);
      Pos p = magisu.pos;
      Pos obj;
      if (enano_adyacente(p)) command(dni,None);
      else {
        int distancia = soraka(p,obj,visit,path,dist,crash);
        if (distancia != -1) {
          while (not adyacente_wizard(obj,p)) obj = path[obj.i][obj.j];
          for (int k=0; k<4; ++k) {
            if (p+Dir(2*k) == obj) command(dni,Dir(2*k));// envio al enano hacia el tesoro
          }
        }
      }
    }
  }
  
  int freeanuel(Pos inicio, Pos& obj, MB& explorado, MP& path, MI& dist, MB& crash) {
    queue<Pos> cola;
    cola.push(inicio);
    while (not cola.empty()) {
      Pos actu = cola.front();
      cola.pop();
      int i = actu.i;
      int j = actu.j;
      explorado[i][j] = true; // marco la posicion visitada
      if (find_enemy(actu)) { // si he encontrado un enemigo acabo
        obj = actu;
        return dist[i][j];
      }
      for (int k=0; k<8; ++k) insert_adj(actu+Dir(k), cola, actu, explorado, path, dist, crash, true); // añado adyacentes
    }
    return -1;
  }

  int bufar(Pos inicio, Pos& obj, MB& explorado, MP& path, MI& dist, MB& crash) {
    queue<Pos> cola;
    cola.push(inicio);
    while (not cola.empty()) {
      Pos actu = cola.front();
      cola.pop();
      int i = actu.i;
      int j = actu.j;
      explorado[i][j] = true; // marco la posicion visitada
      if (cell(actu).owner != me() and cell(actu).id == -1 and cell(actu).type == Cave and not crash[i][j]) { // si he encontrado una celda libre acabo
        obj = actu;
				crash[i][j] = true;
        return dist[i][j];
      }
      for (int k=0; k<8; ++k) insert_adj(actu+Dir(k), cola, actu, explorado, path, dist, crash,false); // añado adyacentes
    }
    return -1;
  }
  
  bool enano_adyacente(Pos p) {
    for (int k=0; k<4; ++k) {
      if(pos_ok(p+Dir(2*k)) and cell(p+Dir(2*k)).id != -1){
        if (unit(cell(p+Dir(2*k)).id).type == Dwarf and unit(cell(p+Dir(2*k)).id).player == me()) return true; // envio al enano hacia el tesoro
      } 
    }
    return false;
  }
  
  int soraka(Pos inicio, Pos& obj, MB& explorado, MP& path, MI& dist, MB& crash) {
    queue<Pos> cola;
    cola.push(inicio);
    while (not cola.empty()) {
      Pos actu = cola.front();
      cola.pop();
      int i = actu.i;
      int j = actu.j;
      explorado[i][j] = true; // marco la posicion visitada
      if (cell(actu).id != -1 and unit(cell(actu).id).type == Dwarf and unit(cell(actu).id).player == me()) { // si he encontrado un tesoro acabo
        obj = actu;
        return dist[i][j];
      }
      for (int k=0; k<4; ++k) insert_adj(actu+Dir(2*k), cola, actu, explorado, path, dist, crash, false); // añado adyacentes
    }
    return -1;
  }
  
	void somos_de_oro(Pos inicio, Pos& obj, MB& explorado, MP& path, MI& dist, MB& crash) {
    dist = MI(N,VI(N,1000));
		priority_queue< pes_pos, vector<pes_pos>, greater<pes_pos> > cua;
		cua.push({0,inicio});
		dist[inicio.i][inicio.j] = 0;
		while (not cua.empty()) {
			Pos actu = cua.top().second;
			cua.pop();
      if (cell(actu).treasure) {
        obj = actu;
        return;
      }
      int pesaux;
			if (not explorado[actu.i][actu.j]) {
				explorado[actu.i][actu.j] = true;
				for (int k=0; k<8; ++k) {
					Pos auxpos = actu+Dir(k); // posicion adyacente
          if (pos_ok(auxpos) and minable(auxpos)) {
            if (cell(auxpos).type == Rock) pesaux = cell(auxpos).turns; // si es una piedra, la vida que le queda
            else pesaux = 1; // si no es una piedra, 1
            if(dist[auxpos.i][auxpos.j] > dist[actu.i][actu.j] + pesaux) {
              path[auxpos.i][auxpos.j] = actu;
              dist[auxpos.i][auxpos.j] = dist[actu.i][actu.j] + pesaux;
              cua.push({dist[auxpos.i][auxpos.j], auxpos});
            }
          }
				}
			}
		}
	}

  void insert_adj(Pos pos, queue<Pos>& cola, Pos pre, MB& explorado, MP& path, MI& dist, MB& crash, bool pelea) {
    if(not pos_ok(pos)) return;
    int i = pos.i;
    int j = pos.j;
    bool enemy = false;
    if (not pelea) { // si busco tesoros...
      if (not explorado[i][j] and crash[i][j] == false and ciclable(pos)) {
        cola.push(pos);
        explorado[i][j] = true;
        dist[i][j] = dist[pre.i][pre.j] + 1;
        path[i][j] = pre;
        cola.push(pos);
      }
    }
    else { // si busco enemigos ...
      if (not explorado[i][j] and crash[i][j] == false and ciclable(pos)) {
        cola.push(pos);
        explorado[i][j] = true;
        dist[i][j] = dist[pre.i][pre.j] + 1;
        path[i][j] = pre;
        cola.push(pos);
      }
    }
  }
  
  /**
   * Play method, invoked once per each round.
   */
  virtual void play () {
    reset_mapa();
    move_dwarves();
    move_wizards();
  }

};


/**
 * Do not modify the following line.
 */
RegisterPlayer(PLAYER_NAME);
