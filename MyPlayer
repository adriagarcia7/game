#include "Player.hh"
#include <vector>
#include <set>

/**
 * Write the name of your player and save this file
 * with the same name and .cc extension.
 */
#define PLAYER_NAME Kronsonder


struct PLAYER_NAME : public Player {

  /**
   * Factory: returns a new instance of this class.
   * Do not modify this function.
   */
  static Player* factory () {
    return new PLAYER_NAME;
  }

  /**
   * Types and attributes for your player can be defined here.
   */
    typedef vector<int> VI;
    typedef vector<VI> MI;
    
    typedef vector<bool> VB;
    typedef vector<VB> MB;
    
    typedef vector<Pos> VP;
    typedef vector<VP> MP;
    
    const int MAX_DIST = 30;
    const int N = 25;
    const int QUEEN_PERIOD = 2;
    MB crash = MB(N,VB(N,false)); // para comprobar casillas ocupadas

    const vector<int> BREAD = {2,0,1};
    const vector<int> SEED = {0,1,2};
    const vector<int> LEAF = {1,2,0};

    int la_pelea_remix (Pos inici, Pos& obj, MB& explorat, MP& path, MI& dist, MB& crash, set<int> my_ids) {
        queue<Pos> cua;
        cua.push(inici);
        while (not cua.empty()){
            Pos actu = cua.front(); 
            cua.pop();
            int i = actu.i; 
            int j = actu.j;
            explorat[i][j] = true; //marco como visitada esta pos
            if(cell(actu).id != -1 and not ally(actu,my_ids)) { // si encuentro un enemigo
                obj = actu;
                return dist[i][j];
            }
            for (int k = 0; k < 4; ++k) insert_adj (actu+Dir(k), cua, actu, explorat, path, dist, crash, true, my_ids, false); //añado las adyacentes a la queue
        }
        return -1;
    }

    int find_food (Pos inici, Pos& obj, MB& explorat, MP& path, MI& dist, MB& crash, bool sq, int id_queen, set<int> my_ids) {
        queue<Pos> cua;
        cua.push(inici);
        while (not cua.empty()){
            Pos actu = cua.front(); 
            cua.pop();
            int i = actu.i; 
            int j = actu.j;
            explorat[i][j] = true; //marco como visitada esta pos
            if(not sq) {
                if (cell(actu).bonus != None) {
                    obj = actu;
                    return dist[i][j];
                }
            }
            else {
                if (cell(actu).id == id_queen) {
                    obj = actu;
                    return dist[i][j];
                }
            }
            for (int k = 0; k < 4; ++k) insert_adj (actu+Dir(k), cua, actu, explorat, path, dist, crash, false, my_ids, sq); //añado las adyacentes a la queue
        }
        return -1;
    }

    void insert_adj (Pos found_pos, queue<Pos>& cua, Pos pre, MB& explorat, MP& path, MI& dist, MB& crash, bool aggressive, set<int> my_ids, bool sq) {
        if (not pos_ok(found_pos)) return;
        int i = found_pos.i;
        int j = found_pos.j;
        bool enemy = false;
 
        if (cell(found_pos).id != -1 and not ally(found_pos,my_ids)) enemy = true; // miro si hay una hormiga en esa casilla
        
        if (not aggressive) { // workers
			if (not sq) {
				if (not explorat[i][j] and cell(found_pos).type != Water and cell(found_pos).id == -1 and not enemy and not crash[i][j]) { // busco comida
					explorat[i][j] = true;
					dist[i][j] = dist[pre.i][pre.j] + 1;
					path[i][j] = pre;
					Pos posicio;
					posicio.i = i;
					posicio.j = j;
					cua.push(posicio);
				}
			}
			else {
				if (not explorat[i][j] and cell(found_pos).type != Water and not enemy) { // busco reina
					explorat[i][j] = true;
					dist[i][j] = dist[pre.i][pre.j] + 1;
					path[i][j] = pre;
					Pos posicio;
					posicio.i = i;
					posicio.j = j;
					cua.push(posicio);
				}
			}
        }
        else { // soldiers
            if (not explorat[i][j] and cell(found_pos).type != Water and not ally(found_pos,my_ids) and not enemy_queen(found_pos)) {
                explorat[i][j] = true;
                dist[i][j] = dist[pre.i][pre.j] + 1;
                path[i][j] = pre;
                Pos posicio;
                posicio.i = i;
                posicio.j = j;
                cua.push(posicio);
            }    
        }
    }
    
    int find_food_queen (Pos inici, Pos& obj, MB& explorat, MP& path, MI& dist, MB& crash) {
        queue<Pos> cua;
        cua.push(inici);
        while (not cua.empty()){
            Pos actu = cua.front(); 
            cua.pop();
            int i = actu.i; 
            int j = actu.j;
            explorat[i][j] = true; //marco como visitada esta pos
            if (cell(actu).bonus != None) {
                obj = actu;
                return dist[i][j];
            }
            for (int k = 0; k < 4; ++k) insert_adj_queen(actu+Dir(k), cua, actu, explorat, path, dist, crash); //añado las adyacentes a la queue
        }
        return -1;
    }

    void insert_adj_queen (Pos found_pos, queue<Pos>& cua, Pos pre, MB& explorat, MP& path, MI& dist, MB& crash) {
        if (not pos_ok(found_pos)) return;
        int i = found_pos.i;
        int j = found_pos.j;

        if (not explorat[i][j] and cell(found_pos).type != Water and cell(found_pos).id == -1) {
            explorat[i][j] = true;
			dist[i][j] = dist[pre.i][pre.j] + 1;
			path[i][j] = pre;
			Pos posicio;
			posicio.i = i;
			posicio.j = j;
			cua.push(posicio);
        }
    }

    bool ally (Pos p, set<int>& my_ids) {
        int id = cell(p).id;
        if (my_ids.find(id) != my_ids.end()) return true;
		else return false;
    }  
    
    bool enemy_queen(Pos p) {
        int idq = cell(p).id;
        set<int> enemies;
        for (int i=0; i<4; ++i) enemies.insert(queens(i)[0]);
        if (enemies.find(idq) != enemies.end()) return true;
        else return false;
    }

    bool my_queen(Pos p) {
        int idq = cell(p).id;
        if (idq == queens(me())[0]) return true;
        else return false;
    }

  /**
   * Play method, invoked once per each round.
   */
virtual void play () {
    
    VI my_workers = workers(me());
    VI my_soldiers = soldiers(me());
    VI my_queens = queens(me());
	set<int> my_ids;
	for(unsigned int i = 0; i < my_workers.size(); ++i) my_ids.insert(my_workers[i]);
    for(unsigned int i = 0; i < my_soldiers.size(); ++i) my_ids.insert(my_soldiers[i]);
    int idq = queens(me())[0];


    for (unsigned int i = 0; i < my_queens.size(); ++i) { // command queen
        MI dist = MI(N,VI(N,0));  
        MB visit = MB(N,VB(N,false));
        MP path = MP(N,VP(N));

        int queen_id = my_queens[i];
		my_ids.insert(queen_id);

        Ant queen = ant(queen_id);
        Pos p = queen.pos;

        if(round()%QUEEN_PERIOD == 0) { // miro si en este turno la reina puede jugar

            if (queen.reserve[Carbohydrate]>=soldier_carbo() and queen.reserve[Lipid]>=soldier_lipid() and queen.reserve[Protein]>=soldier_prote()) {
                for(int k=0;k<4;++k) {
                    Pos aux = p+Dir(k);
                    Cell caux = cell(aux);
                    if(caux.id == -1 and caux.type != Water) lay(queen_id,Dir(k),Soldier);
                }
            }
            else if (queen.reserve[0]>=worker_carbo() and queen.reserve[1]>=worker_lipid() and queen.reserve[2]>=worker_prote()) {
                for(int k=0;k<4;++k) {
                    Pos aux = p+Dir(k);
                    Cell caux = cell(aux);
                    if(caux.id == -1 and caux.type != Water) lay(queen_id,Dir(k),Worker);
                }    
            }
            else {
                Pos obj;
                bool sq = false;
                int distance = find_food_queen(p,obj,visit,path,dist,crash);
                if(distance < 3) {
                    while(dist[obj.i][obj.j] > 1) obj = path[obj.i][obj.j];
                    for(int i=0; i<4; ++i) {
                        if (p+Dir(i) == obj) {
                            if (cell(obj).id == -1) {
                                move(queen_id, Dir(i));
                            }
                        }
                    }
                }
            }
        }
    }

    for(unsigned int i = 0; i < my_workers.size(); ++i) { // command workers
        
        MI dist = MI(N,VI(N,0));  
        MB visit = MB(N,VB(N,false));
        MP path = MP(N,VP(N));
        
        int worker_id = my_workers[i];
        Ant worker = ant(worker_id);
        Pos p = worker.pos;
        Cell c = cell(p);

        if (worker.bonus != None) { //si el trabajador ya lleva bonus
            bool sq = true; //va a buscar a la reina
            Pos obj;
            int distance = find_food(p,obj,visit,path,dist,crash,sq,idq,my_ids);
            while(dist[obj.i][obj.j] > 1) obj = path[obj.i][obj.j];
            for(int k=0; k<4; ++k) {
                if (p+Dir(k) == obj) {
                    if (crash[obj.i][obj.j] == false and not my_queen(obj)) {
                        crash[obj.i][obj.j] = true; // miro si puedo moverme y entonces marco la casilla
                        move(worker_id, Dir(k));
						crash[p.i][p.j] = false; // si me he movido, desmarco anterior casilla
					}
					else if (my_queen(obj)) {
						leave(worker_id);
                        crash[p.i][p.j] = true; // si me he quedado quieto marco esa casilla como ocupada
					}
                }
            }
        }
        else if (worker.bonus == None and c.bonus == None) { //si el trabajador no lleva bonus
            Pos obj;
            bool sq = false;
            int distance = find_food(p,obj,visit,path,dist,crash,sq,idq,my_ids);
            if(distance < MAX_DIST) {
                while(dist[obj.i][obj.j] > 1) obj = path[obj.i][obj.j];
                for(int i=0; i<4; ++i) {
                    if (p+Dir(i) == obj) {
                        if (crash[obj.i][obj.j] == false) {
							crash[obj.i][obj.j] = true; // miro si puedo moverme y entonces marco la casilla
                           	move(worker_id, Dir(i));
							crash[p.i][p.j] = false; // si me he movido, desmarco anterior casilla
						}
                    }
                }
            }
        }
        else if (worker.bonus == None and c.bonus != None) { // si hay un bonus donde estoy
			Pos obj;
			bool sq = true;
			int distance = find_food(p,obj,visit,path,dist,crash,sq,idq,my_ids);
			if (distance < 3) { // miro si estoy cerca de la reina
			    for(int i=0; i<4; ++i) {
                    Pos aux = p+Dir(i);
                    Cell caux = cell(aux);
                    if (pos_ok(aux) and caux.id == -1 and not crash[aux.i][aux.j]) {
                        crash[aux.i][aux.j] = true; // miro si puedo moverme y entonces marco la casilla
                        move(worker_id,Dir(i));
                        //crash[p.i][p.j] = false; // si me he movido, desmarco anterior casilla
                    }
                }	
			} 
			else {
                crash[p.i][p.j] = true; // si me he quedado quieto marco esa casilla como ocupada
                take(worker_id);
            }
		}    
    }
    
    for (unsigned int i = 0; i < my_soldiers.size(); ++i) { // command soldiers
        
        MI dist = MI(N,VI(N,0));  
        MB visit = MB(N,VB(N,false));
        MP path = MP(N,VP(N));
        
        int soldier_id = my_soldiers[i];
        Ant soldier = ant(soldier_id);
        Pos p = soldier.pos;

        Pos obj;
        int distance = la_pelea_remix(p,obj,visit,path,dist,crash,my_ids);
        if(distance < MAX_DIST) {
            while(dist[obj.i][obj.j] > 1) obj = path[obj.i][obj.j];
            for(int i=0; i<4; ++i) {
                if (p+Dir(i) == obj) {
                    if (crash[obj.i][obj.j] == false and not enemy_queen(obj)) {
						crash[obj.i][obj.j] = true; // miro si puedo moverme y entonces marco la casilla
						move(soldier_id, Dir(i));
						crash[p.i][p.j] = false; // si me he movido, desmarco anterior casilla
					}
                }
            }
        }
    }
}

};


/**
 * Do not modify the following line.
 */
RegisterPlayer(PLAYER_NAME);
